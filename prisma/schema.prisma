generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Tablas de usuarios relacionales

model users {
  id               String             @id @default(uuid()) // UUID para PostgreSQL
  name             String
  email            String             @unique
  password         String
  userTypeId       String?            @unique
  UserType         userTypes?         @relation(fields: [userTypeId], references: [id])
  Tenant           tenants?
  user_permissions user_permissions[]
  isActive         Boolean            @default(true)
  createdBy        String? // UUID del usuario que lo creó
  updatedAt        DateTime?          @db.Timestamp(0)
  createdAt        DateTime           @default(now())
}

model userTypes {
  id               String             @id @default(uuid()) // UUID
  name             String             @unique
  tenantId         String
  tenant           tenants            @relation(fields: [tenantId], references: [id])
  user             users?
  user_permissions user_permissions[]
  isActive         Boolean            @default(true)
  createdBy        String? // UUID del usuario que lo creó
  updatedAt        DateTime?          @db.Timestamp(0)
  createdAt        DateTime           @default(now())
}

model user_permissions {
  id           String      @id @default(uuid()) // UUID
  userId       String?
  user         users?      @relation(fields: [userId], references: [id])
  userTypeId   String?
  usertype     userTypes?  @relation(fields: [userTypeId], references: [id])
  optionId     String
  option       options     @relation(fields: [optionId], references: [id])
  permissionId String
  permissions  permissions @relation(fields: [permissionId], references: [id])
  isActive     Boolean     @default(true)
  createdBy    String? // UUID del usuario que lo creó
  updatedAt    DateTime?   @db.Timestamp(0)
  createdAt    DateTime    @default(now())

  @@unique([userId, optionId, permissionId])
  @@unique([userTypeId, optionId, permissionId])
}

model tenants {
  id           String      @id @default(uuid()) // UUID
  name         String
  address      String
  phone        String      @unique
  email        String      @unique
  userTypes    userTypes[]
  tenantTypeId String
  tenantType   tenantTypes @relation(fields: [tenantTypeId], references: [id])
  userId       String      @unique
  user         users       @relation(fields: [userId], references: [id])
  isActive     Boolean     @default(true)
  createdBy    String? // UUID del usuario que lo creó
  updatedAt    DateTime?   @db.Timestamp(0)
  createdAt    DateTime    @default(now())
}

model tenantTypes {
  id        String    @id @default(uuid()) // UUID
  name      String    @unique
  Tenants   tenants[]
  isActive  Boolean   @default(true)
  createdBy String? // UUID del usuario que lo creó
  updatedAt DateTime? @db.Timestamp(0)
  createdAt DateTime  @default(now())
}

model sections {
  id        String    @id @default(uuid()) // UUID
  icon      String
  code      String
  name      String
  path      String?
  isActive  Boolean   @default(true)
  createdBy String? // UUID del usuario que lo creó
  updatedAt DateTime? @db.Timestamp(0)
  createdAt DateTime  @default(now())
  Options   options[]
}

model options {
  id                 String               @id @default(uuid()) // UUID
  icon               String
  code               String
  name               String
  path               String
  sectionsId         String
  section            sections             @relation(fields: [sectionsId], references: [id])
  option_permissions option_permissions[]
  user_permissions   user_permissions[]
  isActive           Boolean              @default(true)
  createdBy          String? // UUID del usuario que lo creó
  updatedAt          DateTime?            @db.Timestamp(0)
  createdAt          DateTime             @default(now())
}

model option_permissions {
  id           String      @id @default(uuid()) // UUID
  optionId     String
  option       options     @relation(fields: [optionId], references: [id])
  permissionId String
  permission   permissions @relation(fields: [permissionId], references: [id])
  isActive     Boolean     @default(true)
  createdBy    String? // UUID del usuario que lo creó
  updatedAt    DateTime?   @db.Timestamp(0)
  createdAt    DateTime    @default(now())
}

model permissions {
  id                 String               @id @default(uuid()) // UUID
  code               String
  name               String
  user_permissions   user_permissions[]
  option_permissions option_permissions[]
  isActive           Boolean              @default(true)
  createdBy          String? // UUID del usuario que lo creó
  updatedAt          DateTime?            @db.Timestamp(0)
  createdAt          DateTime             @default(now())
}
